name: Deploy Helm Chart to GKE

on:
  workflow_dispatch:
  
permissions:
      id-token: write
      contents: read
      
jobs:
  provision_infra:
    runs-on: ubuntu-latest
    outputs:
        kubeconfig: ${{ steps.gcloud.outputs.kubeconfig }}
    steps:
    - uses: 'actions/checkout@v3'

    # Configure Workload Identity Federation via a credentials file.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.GCP_ID_PROVIDER }}
        service_account: ${{ secrets.GCP_SA_EMAIL }}

    # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Backend Terraform Init
      env:
        TF_VAR_backend_bucket_name: ${{ vars.BACKEND_BUCKET_NAME }}
      working-directory: gke-backend
      run: terraform init

    - name: Backend Terraform Plan
      env:
        TF_VAR_backend_bucket_name: ${{ vars.BACKEND_BUCKET_NAME }}
      id: backend-plan
      working-directory: gke-backend
      run: terraform plan

    - name: Backend Terraform Plan Status
      if: steps.backend-plan.outcome == 'failure'
      run: exit 1
    
    - name: Backend Terraform Apply
      env:
        TF_VAR_backend_bucket_name: ${{ vars.BACKEND_BUCKET_NAME }}
      working-directory: gke-backend
      run: terraform apply -auto-approve
    
    - name: Terraform Init
      env:
        TF_VAR_backend_bucket_name: ${{ vars.BACKEND_BUCKET_NAME }}
      working-directory: gke
      run: terraform init

    - name: Terraform Plan
      env:
        TF_VAR_backend_bucket_name: ${{ vars.BACKEND_BUCKET_NAME }}
      id: plan
      working-directory: gke
      run: terraform plan

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Terraform Apply
      env:
        TF_VAR_backend_bucket_name: ${{ vars.BACKEND_BUCKET_NAME }}
        TF_VAR_gke_username: ${{ secrets.GKE_USER }}
        TF_VAR_gke_password: ${{ secrets.GKE_PASS }}
      working-directory: gke
      run: terraform apply -auto-approve

    # Now you can run gcloud commands authenticated as the impersonated service account.
    - id: 'gcloud'
      name: 'gcloud'
      working-directory: gke
      # Confirm cluster is available and run script to create a kubeconfig for a ServiceAccount resource on the cluster.
      run: |-
        gcloud components install gke-gcloud-auth-plugin
        gcloud container clusters get-credentials $(terraform output -raw kubernetes_cluster_name) --region=us-central1
        kubectl get nodes
        ../k8s-sa-kubeconfig
        echo "kubeconfig=$KUBECONFIG" >> $GITHUB_OUTPUT
  deploy:
    runs-on: ubuntu-latest
    needs: provision_infra
    steps:
    - uses: 'actions/checkout@v3'

    - name: 'deploy'
      uses: 'deliverybot/helm@v1'
      with:
        release: 'nginx'
        namespace: 'default'
        chart: ${{ vars.CHART_NAME }}
        token: ${{ github.token }}
      env:
        KUBECONFIG_FILE: ${{ needs.provision_infra.outputs.kubeconfig }}
